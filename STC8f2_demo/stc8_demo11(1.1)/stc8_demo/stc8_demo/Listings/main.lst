C51 COMPILER V9.60.0.0   MAIN                                                              10/14/2020 09:24:43 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          
   2          #include "uart.h"
   3          #include "spi.h"
   4          #include "timer.h"
   5          #include <intrins.h>
   6          #include "Lensdrv.h"
   7          #include "EEPROM.h"
   8          #include <stdlib.h>
   9          #include <stdio.h>
  10          
  11          #define CKSEL   (*(unsigned char volatile xdata*)0xfe00)
*** WARNING C317 IN LINE 11 OF main.c: attempt to redefine macro 'CKSEL'
  12          #define CLKDIV    (*(unsigned char volatile xdata*)0xfe01)
*** WARNING C317 IN LINE 12 OF main.c: attempt to redefine macro 'CLKDIV'
  13          #define IRC24MCR  (*(unsigned char volatile xdata*)0xfe02)
*** WARNING C317 IN LINE 13 OF main.c: attempt to redefine macro 'IRC24MCR'
  14          #define XOSCCR    (*(unsigned char volatile xdata*)0xfe03)
*** WARNING C317 IN LINE 14 OF main.c: attempt to redefine macro 'XOSCCR'
  15          #define IRC32KCR  (*(unsigned char volatile xdata*)0xfe04)
*** WARNING C317 IN LINE 15 OF main.c: attempt to redefine macro 'IRC32KCR'
  16          
  17          
  18          xdata enum PELCO_D_CMD
  19          {
  20            ZOOM_IN = 0,                                                                  /* 变倍短 (放大+)   0*/
  21            ZOOM_OUT,                                                                     /* 变倍长 缩小-     1*/
  22            FOCUS_NEAR,                                                                   /* 聚焦近 聚焦+     2*/
  23            FOCUS_FAR,                                                                    /* 聚焦远 聚焦-     3*/
  24            STOP,                                                                         /* 停止             4*/
  25            SELF_TEST_ZOOM,
  26            SELF_TEST_FOCUS,
  27            INVALID
  28          };
  29          
  30          xdata enum LEN_SPEED
  31          {
  32            FAST = 0x0400,
  33            FAST_MIDDLE = 0x0800,
  34            MIDDLE = 0x0C00,/*0x5555,0xAAAA,0x1500*/
  35            SLOW = 0xFFFF,
  36          };
  37          
  38          /****************************************************************************
  39          PELCO_D 协议说明：
  40          数据格式：1位起始位、8位数据、1位停止位、无校验位;
  41          命令格式：|  字节1   |  字节2 |  字节3   |   字节4  |  字节5   |   字节6  |  字节7 |
  42                      同步字节   地址码    指令码1    指令码2    数据码1    数据码2   校验码
  43          
  44          1.该协议中所有数值都为十六进制数
  45          2.同步字节始终为FFH
  46          3.地址码为摄像机的逻辑地址号，地址范围：00H~FFH
  47          4.指令码表示不同的动作
  48          5.数据码1、2分别表示水平、垂直方向速度(00~3FH),FFH表示“turbo” 速度
  49          6.校验码 = MOD[(字节2+字节3+字节4+字节5+字节6)/100H]
C51 COMPILER V9.60.0.0   MAIN                                                              10/14/2020 09:24:43 PAGE 2   

  50                以下地址码为0x01
  51          ****************************************************************************/
  52          
  53          xdata unsigned char PELCO_D[][7] = {
  54            /* 变倍短 放大+ */
  55            {0xff,0x01,0x00,0x20,0x00,0x00,0x21},
  56            /* 变倍长 缩小- */
  57            {0xff,0x01,0x00,0x40,0x00,0x00,0x41},
  58            /* 聚焦近 聚焦+ */
  59            {0xff,0x01,0x00,0x80,0x00,0x00,0x81},
  60            /* 聚焦远 聚焦- */
  61            {0xff,0x01,0x01,0x00,0x00,0x00,0x02},
  62            /* 停止 */
  63            {0xff,0x01,0x00,0x00,0x00,0x00,0x01},
  64          };
  65          
  66          
  67          
  68          void delay_1(void)
  69          {
  70   1        char i = 0;
  71   1        for(i = 254; i > 0; i--);
  72   1        
  73   1      }
  74          
  75          
  76          unsigned char SELF_TEST_ZOOM_FLAG = 0;
  77          unsigned char SELF_TEST_FOCUS_FLAG = 0;
  78          unsigned char CNT_FLAG = 0;
  79          
  80          
  81          /****************************************************************************
  82          * 名    称: void SELF_TEST_UnInit(void)
  83          * 功    能: 给eeprom地址写入数值，结束首次变倍电机 焦距电机自检
  84          * 入口参数: 无
  85          * 出口参数: 无
  86          * 说    明:
  87          * 调用方法:
  88          ****************************************************************************/
  89          void SELF_TEST_UnInit(void)
  90          {
  91   1        IapErase(0x0400);
  92   1        IapErase(0x0401);
  93   1        IapErase(0x0402);
  94   1        IapErase(0x0403);
  95   1        IapErase(0x0404);
  96   1        IapProgram(0x0400, 0xFF);
  97   1        IapProgram(0x0401, 0xFF);
  98   1        IapProgram(0x0402, 0xFF);
  99   1        IapProgram(0x0403, 0xFF);
 100   1        IapProgram(0x0404, 0xFF);
 101   1      }
 102          
 103          
 104          
 105          /****************************************************************************
 106          * 名    称: void SAVE_DATA_TO_EEPROM(unsigned char zoomH, unsigned char zoomL, unsigned char focusH, unsigne
             -d char focusL)
 107          
 108          * 功    能: 把数据保存在eeprom中
 109          * 入口参数: 无
 110          * 出口参数: 无
C51 COMPILER V9.60.0.0   MAIN                                                              10/14/2020 09:24:43 PAGE 3   

 111          * 说    明:
 112          * 调用方法:
 113          ****************************************************************************/
 114          void SAVE_DATA_TO_EEPROM(unsigned char zoomH, unsigned char zoomL, unsigned char focusH, unsigned char foc
             -usL)
 115          {
 116   1        IapErase(0x0400);
 117   1        IapErase(0x0401);
 118   1        IapErase(0x0402);
 119   1        IapErase(0x0403);
 120   1        IapProgram(0x0400, zoomH); //zoom 高位数据
 121   1        IapProgram(0x0401, zoomL); //zoom 低位数据
 122   1        IapProgram(0x0402, focusH);//focus 高位数据
 123   1        IapProgram(0x0403, focusL);//focus 低位数据
 124   1      }
 125          
 126          
 127          
 128          
 129          /****************************************************************************
 130          * 名    称: unsigned short CHAR_TO_SHORT(unsigned char data1, unsigned char data2)
 131          * 功    能: 将char类型数据转换为short类型数据
 132          * 入口参数: unsigned char , unsigned char
 133          * 出口参数: unsigned short
 134          * 说    明: 返回0 为传参错误
 135          * 调用方法:
 136          ****************************************************************************/
 137          unsigned short CHAR_TO_SHORT(unsigned char data1, unsigned char data2)
 138          {
 139   1        unsigned char dat[2] = {0};
 140   1        if((dat[0] >= 0)&&(dat[1] >= 0)&&(dat[0] <= 0xFF)&&(dat[1] <= 0xFF))
 141   1        {
 142   2          dat[0] = data1;
 143   2          dat[1] = data2;
 144   2          return (dat[0]<<8)|dat[1];  
 145   2        }
 146   1        else
 147   1        {
 148   2          return 0;
 149   2        }
 150   1      }
 151            
 152          
 153          
 154          /****************************************************************************
 155          * 名    称: int SHORT_TO_CHAR(unsigned char *data1, unsigned char *data2, unsigned short)
 156          * 功    能: 将short类型数据转换为char类型数据
 157          * 入口参数: unsigned short
 158          * 出口参数: unsigned char* , unsigned char*
 159          * 说    明: 返回1 转换成功，返回0 传参错误
 160          * 调用方法:
 161          ****************************************************************************/
 162          int SHORT_TO_CHAR(unsigned char *data1, unsigned char *data2, unsigned short dat)
 163          {
 164   1        if(dat >= 0)
 165   1        {
 166   2          *data1 = dat >> 8;
 167   2          *data2 = dat; 
 168   2          return 1;
 169   2        }
 170   1        else
 171   1        {
C51 COMPILER V9.60.0.0   MAIN                                                              10/14/2020 09:24:43 PAGE 4   

 172   2          return 0;
 173   2        }
 174   1      }
 175          
 176          
 177          
 178          
 179          int INT_TO_CHAR(unsigned char *data1, unsigned char *data2, unsigned char *data3, unsigned char *data4,uns
             -igned int dat)
 180          {
 181   1        if(dat >= 0)
 182   1        {
 183   2          *data1 = dat >> 24;
 184   2          *data2 = dat >> 16; 
 185   2          *data2 = dat >> 8;
 186   2          *data2 = dat;
 187   2          return 1;
 188   2        }
 189   1        else
 190   1        {
 191   2          return 0;
 192   2        }
 193   1      }
*** WARNING C280 IN LINE 179 OF main.c: 'data3': unreferenced local variable
*** WARNING C280 IN LINE 179 OF main.c: 'data4': unreferenced local variable
 194          
 195          
 196          /****************************************************************************
 197          * 名    称: void SYS_Init(void)
 198          * 功    能: 系统初始化 使用内部24MHz时钟
 199          * 入口参数: 无
 200          * 出口参数: 无
 201          * 说    明:
 202          * 调用方法:
 203          ****************************************************************************/
 204          void SYS_Init(void)
 205          {
 206   1        CKSEL = 0x48; //0100 1000
 207   1        /*
 208   1        选择内部24Mhz高精度IRC    (MCKSEL[1:0])    ;
 209   1        主时钟分频输出到 P1.6 脚 （MCLKO_S）       ;
 210   1        主时钟分频输出频率MCLK/4  (MCLKODIV[3:0])  ;
 211   1        */
 212   1      }
 213          
 214          
 215          
 216          void Delay100ms()   //@24.000MHz
 217          {
 218   1        unsigned char i, j, k;
 219   1      
 220   1        _nop_();//1us延时
 221   1        _nop_();//1us延时
 222   1        i = 13;
 223   1        j = 45;
 224   1        k = 214;
 225   1        do
 226   1        {
 227   2          do
 228   2          {
 229   3            while (--k);
 230   3          } while (--j);
C51 COMPILER V9.60.0.0   MAIN                                                              10/14/2020 09:24:43 PAGE 5   

 231   2        } while (--i);
 232   1      }
 233          
 234          
 235          
 236          void Delay150ms()   //@24.000MHz
 237          {
 238   1        unsigned char i, j, k;
 239   1      
 240   1        _nop_();
 241   1        i = 19;
 242   1        j = 68;
 243   1        k = 67;
 244   1        do
 245   1        {
 246   2          do
 247   2          {
 248   3            while (--k);
 249   3          }
 250   2          while (--j);  
 251   2        } 
 252   1        while (--i);
 253   1      }
 254          
 255          
 256          
 257          
 258          
 259          void Delay200ms()   //@24.000MHz
 260          {
 261   1        unsigned char i, j, k;
 262   1      
 263   1        _nop_();
 264   1        _nop_();
 265   1        i = 25;
 266   1        j = 90;
 267   1        k = 176;
 268   1        do
 269   1        {
 270   2          do
 271   2          {
 272   3            while (--k);
 273   3          } while (--j);
 274   2        } while (--i);
 275   1      }
 276          
 277          
 278          
 279          /*实现printf打印*/
 280          char putchar (char c)
 281          {
 282   1        ES = 0;         //禁止串口1中断
 283   1        SBUF = c;       
 284   1        while(TI==0);   //等待发送完成   标志置1时发送完成
 285   1        TI = 0;         //清中断标志
 286   1      //  ES = 1;       //允许串口1中断
 287   1        return 0;
 288   1          
 289   1      }
 290            
 291          
 292          
C51 COMPILER V9.60.0.0   MAIN                                                              10/14/2020 09:24:43 PAGE 6   

 293          
 294          
 295          
 296          
 297          /****************************************************************************
 298          * 名    称: void main(void)
 299          * 功    能: 程序主入口
 300          * 入口参数: 无
 301          * 出口参数: 无
 302          * 说    明:
 303          * 调用方法:
 304          ****************************************************************************/
 305          void main(void)
 306          {
 307   1                                /* xdata声明的变量会存储到外部扩展RAM（Flash）,一般指外部0x0000-0xffff空间,用DPTR访问 */
 308   1        xdata unsigned short FcStep = 0;
 309   1        xdata unsigned short ZoomStep = 0;    //ZoomStep
 310   1        xdata unsigned char FcStepCnt = 0;
 311   1        xdata unsigned char ZoomStepCnt = 0;  //ZoomStepCnt
 312   1        
 313   1        //总步数
 314   1        xdata unsigned int ZoomStepNum = 0; 
 315   1        xdata unsigned int FcStepNum = 0; 
 316   1      
 317   1        xdata char LenStatus = STOP;                                  //STOP == PELCO_D的停止指令
 318   1        
 319   1        //自检
 320   1        unsigned int self_test_zoom = 0; 
 321   1        unsigned int self_test_focus = 0;
 322   1      
 323   1        unsigned char ZoomStepTmp[4] = {0};
 324   1        unsigned char FcStepTmp[4] = {0};
 325   1        unsigned char num_s=65;
 326   1        char tmp_flag = 0;                                            //没用到这个
 327   1        
 328   1        SYS_Init();   //系统初始化 使用内部24Mhz高精度IRC时钟
 329   1        Timer4Init();
 330   1        UART1_Init();
 331   1        SPI_Init(); 
 332   1        SPI_Speed(1);
 333   1      
 334   1      
 335   1        MS_Rest(); //41918
 336   1        LensDrvInit(); //镜头初始化
 337   1        LensDrvIrisOpen();//开镜头
 338   1        
 339   1        
 340   1        while (1)
 341   1        {   
 342   2        //  printf("1");
 343   2        //    printf("%bd",num_s);
 344   2          UartSendByte('b');
 345   2          
 346   2            if(UART1_Overflow_Flag)           //缓冲区满标志    （ UART1_Recv_Buf[] 已存放了可以比较的数据）
 347   2            {
 348   3                /* 变倍短 (放大+) */
 349   3                if(    (UART1_Recv_Buf[0] == PELCO_D[ZOOM_IN][0])&&
 350   3                       (UART1_Recv_Buf[1] == PELCO_D[ZOOM_IN][1])&&
 351   3                       (UART1_Recv_Buf[2] == PELCO_D[ZOOM_IN][2])&&
 352   3                       (UART1_Recv_Buf[3] == PELCO_D[ZOOM_IN][3])&&
 353   3                       (UART1_Recv_Buf[4] == PELCO_D[ZOOM_IN][4])&&
 354   3                       (UART1_Recv_Buf[5] == PELCO_D[ZOOM_IN][5])&&
C51 COMPILER V9.60.0.0   MAIN                                                              10/14/2020 09:24:43 PAGE 7   

 355   3                       (UART1_Recv_Buf[6] == PELCO_D[ZOOM_IN][6]))
 356   3                {
 357   4                    LenStatus = ZOOM_IN;
 358   4                }
 359   3                /* 变倍长 (缩小-) */
 360   3                else if((UART1_Recv_Buf[0] == PELCO_D[ZOOM_OUT][0])&&
 361   3                        (UART1_Recv_Buf[1] == PELCO_D[ZOOM_OUT][1])&&
 362   3                        (UART1_Recv_Buf[2] == PELCO_D[ZOOM_OUT][2])&&
 363   3                        (UART1_Recv_Buf[3] == PELCO_D[ZOOM_OUT][3])&&
 364   3                        (UART1_Recv_Buf[4] == PELCO_D[ZOOM_OUT][4])&&
 365   3                        (UART1_Recv_Buf[5] == PELCO_D[ZOOM_OUT][5])&&
 366   3                        (UART1_Recv_Buf[6] == PELCO_D[ZOOM_OUT][6]))
 367   3                {
 368   4                  LenStatus = ZOOM_OUT;
 369   4                }
 370   3                /* 聚焦近 (聚焦+) */
 371   3                else if((UART1_Recv_Buf[0] == PELCO_D[FOCUS_NEAR][0])&&(UART1_Recv_Buf[1] == PELCO_D[FOCUS_NEAR][1])&
             -&(UART1_Recv_Buf[2] == PELCO_D[FOCUS_NEAR][2])&&(UART1_Recv_Buf[3] == PELCO_D[FOCUS_NEAR][3])
 372   3                   &&(UART1_Recv_Buf[4] == PELCO_D[FOCUS_NEAR][4])&&(UART1_Recv_Buf[5] == PELCO_D[FOCUS_NEAR][5])&&(UA
             -RT1_Recv_Buf[6] == PELCO_D[FOCUS_NEAR][6]))         
 373   3                { 
 374   4                    LenStatus = FOCUS_NEAR;           
 375   4                }
 376   3                /* 聚焦远 (聚焦-) */
 377   3                else if((UART1_Recv_Buf[0] == PELCO_D[FOCUS_FAR][0])&&(UART1_Recv_Buf[1] == PELCO_D[FOCUS_FAR][1])&&(
             -UART1_Recv_Buf[2] == PELCO_D[FOCUS_FAR][2])&&(UART1_Recv_Buf[3] == PELCO_D[FOCUS_FAR][3])
 378   3                   &&(UART1_Recv_Buf[4] == PELCO_D[FOCUS_FAR][4])&&(UART1_Recv_Buf[5] == PELCO_D[FOCUS_FAR][5])&&(UART
             -1_Recv_Buf[6] == PELCO_D[FOCUS_FAR][6]))          
 379   3                {
 380   4                    LenStatus = FOCUS_FAR;
 381   4                }
 382   3                /* 停止 */
 383   3                else if((UART1_Recv_Buf[0] == PELCO_D[STOP][0])&&(UART1_Recv_Buf[1] == PELCO_D[STOP][1])&&(UART1_Recv
             -_Buf[2] == PELCO_D[STOP][2])&&(UART1_Recv_Buf[3] == PELCO_D[STOP][3])
 384   3                   &&(UART1_Recv_Buf[4] == PELCO_D[STOP][4])&&(UART1_Recv_Buf[5] == PELCO_D[STOP][5])&&(UART1_Recv_Buf
             -[6] == PELCO_D[STOP][6]))         
 385   3                {
 386   4                    LenStatus = STOP;
 387   4                    tmp_flag = 0;           
 388   4                }
 389   3              Receive_count = 0;          //缓存清零                                    (接收计数清0              )
 390   3              UART1_Overflow_Flag = 0;    //允许串口继续接收数据                         （可进UART1中断进行数据接收）
 391   3            }   
 392   2            
 393   2      #if 1
 394   2            switch(LenStatus)                                                           //经过比较对LenStatus赋值开始做相应动作             
 395   2            {
 396   3              case ZOOM_IN: //放大
 397   3              /*  每次进来ZoomStepCnt++;驱动镜头速度相对慢;反转;进来的第21次 Delay100ms;    */                  
 398   3                    if(20 >= ZoomStepCnt)
 399   3                    {
 400   4                      ZoomStep = 53;//100
 401   4                      LensDrvZoomSpeed(MIDDLE);                     //MIDDLE = 0x0C00   //驱动镜头速度（相对慢）          
 402   4                    }
 403   3      
 404   3                    else
 405   3                    {                                                                                                //FAST = 0x0400,
 406   4                      ZoomStep = 255;                                                                                 //FAST_MIDDLE = 0x0800,
 407   4                      LensDrvZoomSpeed(FAST);                       //FAST = 0x0400    //驱动镜头速度  （相对快）               //MI
             -DDLE = 0x0C00,
 408   4                    }                                                                                              //SLOW = 0xFFFF,
 409   3                                                                          
C51 COMPILER V9.60.0.0   MAIN                                                              10/14/2020 09:24:43 PAGE 8   

 410   3                    LensDrvZoomMove( 1, ZoomStep);                                      // 1:反转                         /*2020.10.11*/
 411   3                    ZoomStepNum = ZoomStepNum + ZoomStep;
 412   3                    ZoomStepCnt++;
 413   3                    Delay100ms();
 414   3                break;
 415   3              case ZOOM_OUT:  //缩小
 416   3                
 417   3                    if(20 >= ZoomStepCnt)
 418   3                    {
 419   4                      ZoomStep = 53;//100
 420   4                      LensDrvZoomSpeed(MIDDLE);               //MIDDLE = 0x0C00
 421   4                    }
 422   3                    else
 423   3                    {
 424   4                      ZoomStep = 255;
 425   4                      LensDrvZoomSpeed(FAST);       //FAST = 0x0400       
 426   4                    } 
 427   3                    
 428   3                    LensDrvZoomMove( 0, ZoomStep);                                      // 0：正转  
 429   3                    ZoomStepCnt++;
 430   3                    ZoomStepNum = ZoomStepNum - ZoomStep;           
 431   3      
 432   3                    Delay100ms();
 433   3                break;
 434   3              case FOCUS_NEAR:  //聚焦近 聚焦+
 435   3        
 436   3                if(4 >= FcStepCnt)
 437   3                {
 438   4                  FcStep = 4; //53
 439   4                  LensDrvFocusSpeed(SLOW); //MIDDLE  FAST_MIDDLE
 440   4                }
 441   3                else
 442   3                {
 443   4                  FcStep = 255;
 444   4                  LensDrvFocusSpeed(FAST);                      //FAST = 0x0400
 445   4                }
 446   3                    
 447   3                //限位判断
 448   3                LensDrvFocusMove( 1, FcStep);         
 449   3                FcStepCnt++;
 450   3                FcStepNum = FcStepNum - FcStep;
 451   3                Delay100ms();         
 452   3                break;
 453   3              case FOCUS_FAR: //聚焦远 聚焦-
 454   3      
 455   3                if(4 >= FcStepCnt)
 456   3                {
 457   4                  FcStep = 4;//53
 458   4                  LensDrvFocusSpeed(SLOW);  //MIDDLE  FAST_MIDDLE         
 459   4                }
 460   3                else
 461   3                {
 462   4                  FcStep = 255;
 463   4                  LensDrvFocusSpeed(FAST);            
 464   4                }
 465   3                
 466   3                //限位判断
 467   3                LensDrvFocusMove( 0, FcStep);                     
 468   3                FcStepCnt++;
 469   3                FcStepNum = FcStepNum + FcStep; 
 470   3                Delay100ms();         
 471   3                break;
C51 COMPILER V9.60.0.0   MAIN                                                              10/14/2020 09:24:43 PAGE 9   

 472   3              case STOP:  //停止
 473   3                FcStepCnt = 0;
 474   3                ZoomStepCnt = 0;
 475   3                LensDrvFocusSpeed(SLOW);
 476   3                LensDrvZoomSpeed(SLOW);
 477   3                LensDrvFocusStop();
 478   3                LensDrvZoomStop();
 479   3                LenStatus = INVALID;
 480   3              
 481   3                break;
 482   3              case  SELF_TEST_ZOOM:     
 483   3                
 484   3                LensDrvZoomSpeed(FAST_MIDDLE);
 485   3                LensDrvZoomMove( 0, 255);
 486   3            
 487   3                if(SELF_TEST_ZOOM_FLAG)
 488   3                    self_test_zoom++;
 489   3                
 490   3                if(self_test_zoom > 34500)
 491   3                {
 492   4                  LensDrvFocusSpeed(SLOW);
 493   4                  LensDrvZoomSpeed(SLOW);
 494   4                  LensDrvFocusStop();
 495   4                  LensDrvZoomStop();
 496   4                  LenStatus = SELF_TEST_FOCUS;
 497   4            
 498   4                  delay_1();
 499   4                  delay_1();
 500   4                }
 501   3               break;
 502   3              case  SELF_TEST_FOCUS:
 503   3                LensDrvFocusSpeed(FAST_MIDDLE);
 504   3                LensDrvFocusMove( 1, 255); //聚焦-
 505   3            
 506   3                if(SELF_TEST_FOCUS_FLAG)
 507   3                    self_test_focus++;
 508   3            
 509   3                if(self_test_focus > 28000)
 510   3                {
 511   4                  LenStatus = STOP;
 512   4                  StopTime();
 513   4                  //自检结束
 514   4                  SELF_TEST_UnInit();
 515   4                  ZoomStepNum = 0;
 516   4                  FcStepNum = 0;
 517   4                  
 518   4                  delay_1();
 519   4                }         
 520   3               break; 
 521   3      
 522   3              default:
 523   3                delay_1();
 524   3                break;
 525   3            }
 526   2      #endif
 527   2            
 528   2        }
 529   1        
 530   1      }
 531          
 532          
 533          
C51 COMPILER V9.60.0.0   MAIN                                                              10/14/2020 09:24:43 PAGE 10  

 534          
 535          
 536          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1367    ----
   CONSTANT SIZE    =     10    ----
   XDATA SIZE       =     35      11
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3      44
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  7 WARNING(S),  0 ERROR(S)
